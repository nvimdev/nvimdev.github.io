<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>lspsaga on</title><link>https://dev.neovim.pro/tags/lspsaga/</link><description>Recent content in lspsaga on</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://dev.neovim.pro/tags/lspsaga/index.xml" rel="self" type="application/rss+xml"/><item><title>Breadcrumbs</title><link>https://dev.neovim.pro/lspsaga/breadcrumbs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dev.neovim.pro/lspsaga/breadcrumbs/</guid><description>Usage # Dynamically render breadcrumb symbols in your winbar, similar to IDEs
Important
This module is the prerequisite for the outline and the implement module.
Default Options # Default options in symbol_in_winbar section:
enable = true Enable separator = ' ‚Ä∫ ' Separator symbol hide_keyword = false when true some symbols like if and for Will be ignored (need treesitter) show_file = true Show file name before symbols folder_level = 1 Show how many folder layers before the file name color_mode = true true mean the symbol name and icon have same color.</description></item><item><title>Callhierarchy</title><link>https://dev.neovim.pro/lspsaga/callhierarchy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dev.neovim.pro/lspsaga/callhierarchy/</guid><description>Usage # The callhierarchy module has two commands, :Lspsaga incoming_calls and :Lspsaga outgoing_calls.
Default Options # Default options in callhierarchy section:
layout = 'float' Layout normal and float Or you can pass in an extra argument like :Lspsaga incoming_calls ++normal, which overrides this option Default Keymaps # Default keymaps in callhierarchy.keys:
edit = 'e' edit (open) file vsplit = 's' vsplit split = 'i' split tabe = 't' open in new tab quit = 'q' quit layout shuttle = '[w' shuttle bettween the layout left and right toggle_or_req = 'u' toggle or do request close = '&amp;lt;C-c&amp;gt;k' close layout Suggest Workflow # Same as finder, use keys.</description></item><item><title>Code Action</title><link>https://dev.neovim.pro/lspsaga/codeaction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dev.neovim.pro/lspsaga/codeaction/</guid><description>Usage # Use :Lspsaga code_action to invoke.
Tips # If you know the action do, just press the action number. If you don&amp;rsquo;t know what the action do, move to it. Take a look at the action preview, then press &amp;lt;CR&amp;gt;. Default Options # Default options in code_action section:
num_shortcut = true whether number shortcut for code actions are enabled show_server_name = false show language server name extend_gitsigns = false extend gitsigns plugin diff action Default Keymaps # Default keymaps in code_action.</description></item><item><title>Diagnostic</title><link>https://dev.neovim.pro/lspsaga/diagnostic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dev.neovim.pro/lspsaga/diagnostic/</guid><description>Usage # Invoke :Lspsaga diagnostic_jump_next and :Lspsaga diagnostic_jump_prev to jump around diagnostics. When the current cursor position has a diagnostic available, the commands will show the diagnostic in a nice float.
You can use scroll_preview to preview code action in the diagnostic window. Default keybind is &amp;lt;C-f&amp;gt; and &amp;lt;C-b&amp;gt;.
Workflow shown in the GIF set jump_num_shortcut to true.
[e was bind to diagnostic_jump_next with vim.keymap.set('n', '[e', '&amp;lt;cmd&amp;gt;Lspsaga diagnostic_jump_next') The current position has diagnostic, so a diagnostic window is opened in place.</description></item><item><title>Ui Beacon</title><link>https://dev.neovim.pro/lspsaga/misc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dev.neovim.pro/lspsaga/misc/</guid><description>Generic UI Options # Generic options for the Lspsaga UI:
border = 'single' Border type, see :help nvim_open_win devicon = true Whether to use nvim-web-devicons title = true Show title in some float window expand = '‚äû' Expand icon collapse = '‚äü' Collapse icon code_action = 'üí°' Code action icon actionfix = 'Ó¨ì ' Action fix icon lines = { '‚îó', '‚î£', '‚îÉ', '‚îÅ', '‚îè' } Symbols used in virtual text connect kind = {} LSP kind custom table imp_sign = 'Û∞≥õ ' Implement icon Beacon # In Lspsaga, some commands jump around in buffer(s).</description></item></channel></rss>